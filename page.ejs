<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <b><i ><div style="color: black;background-color: wheat; border: solid black 2px;">
        1. Node.js क्या है? आप इसका उपयोग कहां कर सकते हैं?
Node.js एक ओपन-सोर्स , क्रॉस-प्लेटफ़ॉर्म जावास्क्रिप्ट रनटाइम वातावरण और लाइब्रेरी है जो क्लाइंट के ब्राउज़र के बाहर वेब एप्लिकेशन चलाने के लिए है। इसका  उपयोग सर्वर-साइड वेब एप्लिकेशन बनाने के लिए किया जाता है।<br> <br>

Node.js डेटा-गहन अनुप्रयोगों के लिए एकदम सही है क्योंकि यह एक एसिंक्रोनस, इवेंट-संचालित मॉडल का उपयोग करता है। आप वीडियो स्ट्रीमिंग साइट्स जैसे I/O गहन वेब अनुप्रयोगों का उपयोग कर सकते हैं। आप इसे विकसित करने के लिए भी उपयोग कर सकते हैं: रीयल-टाइम वेब अनुप्रयोग, नेटवर्क अनुप्रयोग, सामान्य-उद्देश्य अनुप्रयोग और वितरित सिस्टम।<br>

2. Node.js का उपयोग क्यों करें?
Node.js स्केलेबल नेटवर्क प्रोग्राम बनाना आसान बनाता है। इसके कुछ फ़ायदे इस प्रकार हैं:

यह आम तौर पर तेज़ है
यह शायद ही कभी ब्लॉक करता है
यह एक एकीकृत प्रोग्रामिंग भाषा और डेटा प्रकार प्रदान करता है
सब कुछ अतुल्यकालिक है 
इससे बहुत अच्छी समवर्तीता प्राप्त होती है<br> <br>
3. Node.js कैसे काम करता है?
Node.js का उपयोग करने वाले वेब सर्वर में आमतौर पर एक वर्कफ़्लो होता है जो नीचे दिखाए गए आरेख के समान होता है। आइए संचालन के इस प्रवाह को विस्तार से देखें।
क्लाइंट वेब एप्लिकेशन के साथ इंटरैक्ट करने के लिए वेबसर्वर को अनुरोध भेजते हैं। अनुरोध नॉन-ब्लॉकिंग या ब्लॉकिंग हो सकते हैं:
डेटा के लिए क्वेरी करना
डेटा हटाना 
डेटा अद्यतन करना
Node.js आने वाले अनुरोधों को प्राप्त करता है और उन्हें इवेंट कतार में जोड़ता है
फिर अनुरोधों को एक-एक करके इवेंट लूप के माध्यम से पास किया जाता है। यह जाँचता है कि क्या अनुरोध इतने सरल हैं कि उन्हें किसी बाहरी संसाधन की आवश्यकता नहीं है
इवेंट लूप सरल अनुरोधों (गैर-अवरुद्ध संचालन) को संसाधित करता है, जैसे कि I/O पोलिंग, और संबंधित क्लाइंट को प्रतिक्रियाएं लौटाता है
थ्रेड पूल से एक एकल थ्रेड को एक एकल जटिल अनुरोध को सौंपा जाता है। यह थ्रेड बाहरी संसाधनों, जैसे कि कम्प्यूटेशन, डेटाबेस, फ़ाइल सिस्टम, आदि तक पहुँच कर किसी विशेष अवरोधन अनुरोध को पूरा करने के लिए जिम्मेदार होता है।

जब कार्य पूर्णतः संपन्न हो जाता है, तो प्रतिक्रिया को इवेंट लूप में भेजा जाता है, जो उस प्रतिक्रिया को क्लाइंट को वापस भेज देता है।<br><br>
4. Node.js एकल-थ्रेडेड क्यों है?
Node.js एसिंक्रोनस प्रोसेसिंग के लिए सिंगल-थ्रेडेड है। सामान्य वेब लोड के तहत सिंगल-थ्रेड पर एसिंक्रोनस प्रोसेसिंग करके, सामान्य थ्रेड-आधारित कार्यान्वयन के बजाय अधिक प्रदर्शन और स्केलेबिलिटी हासिल की जा सकती है।<br> <br>

5. यदि Node.js एकल-थ्रेडेड है, तो यह समवर्तीता को कैसे संभालता है?
नोड जेएस प्लेटफ़ॉर्म द्वारा मल्टी-थ्रेडेड रिक्वेस्ट/रिस्पॉन्स स्टेटलेस मॉडल का पालन नहीं किया जाता है, और यह सिंगल-थ्रेडेड इवेंट लूप मॉडल का पालन करता है। नोड जेएस प्रोसेसिंग प्रतिमान जावास्क्रिप्ट इवेंट-आधारित मॉडल और जावास्क्रिप्ट कॉलबैक सिस्टम से काफी प्रभावित है। नतीजतन, Node.js अधिक समवर्ती क्लाइंट अनुरोधों को आसानी से प्रबंधित कर सकता है। इवेंट लूप, Node.js में प्रोसेसिंग मॉडल का धड़कता हुआ दिल है।<br> <br>

6. Node.js में कॉलबैक समझाएँ।
किसी दिए गए कार्य के बाद कॉलबैक फ़ंक्शन को कॉल किया जाता है। यह इस दौरान अन्य कोड को चलाने की अनुमति देता है और किसी भी अवरोध को रोकता है। एक एसिंक्रोनस प्लेटफ़ॉर्म होने के नाते, Node.js कॉलबैक पर बहुत अधिक निर्भर करता है। Node के सभी API कॉलबैक का समर्थन करने के लिए लिखे गए हैं।<br> <br>

7. कॉलबैक के बजाय प्रॉमिस का उपयोग करने के क्या लाभ हैं?
अतुल्यकालिक तर्क का नियंत्रण प्रवाह अधिक निर्दिष्ट और संरचित होता है।
युग्मन कम है.
हमने त्रुटि प्रबंधन की अंतर्निहित व्यवस्था बना रखी है।
पठनीयता में सुधार. <br> <br>
8. आप I/O शब्द को कैसे परिभाषित करेंगे? 
I/O शब्द का उपयोग किसी भी प्रोग्राम, ऑपरेशन या डिवाइस का वर्णन करने के लिए किया जाता है जो किसी माध्यम से या उससे और किसी अन्य माध्यम से डेटा स्थानांतरित करता है
हर ट्रांसफ़र एक माध्यम से आउटपुट और दूसरे में इनपुट होता है। माध्यम कोई भौतिक डिवाइस, नेटवर्क या सिस्टम के भीतर की फ़ाइलें हो सकती हैं
    </div></i></b>
</body>
</html>